name: Convert TransXChange to GTFS

on:
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Node.js 14.x
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y unzip zip jq

      - name: Install transxchange2gtfs CLI tool
        run: npm install -g transxchange2gtfs

      - name: Download new JSON data
        run: curl -L -o new_dataset.json "${{ secrets.timetableURL }}"

      - name: Compare modified dates using json_parse
        id: compare-dates
        run: |
          # Create json_parse.js file
          echo "const fs = require('fs');" > json_parse.js
          echo "const newDataset = JSON.parse(fs.readFileSync('new_dataset.json', 'utf8'));" >> json_parse.js
          echo "const existingDataset = JSON.parse(fs.readFileSync('rawdata/dataset.json', 'utf8'));" >> json_parse.js
          echo "const newModified = new Date(newDataset.modified);" >> json_parse.js
          echo "const existingModified = new Date(existingDataset.modified);" >> json_parse.js
          echo "if (newModified > existingModified) {" >> json_parse.js
          echo "  console.log('New dataset is newer. Downloading the file.');" >> json_parse.js
          echo "  console.log('newer=true');" >> json_parse.js
          echo "} else {" >> json_parse.js
          echo "  console.log('New dataset is not newer. Using existing data.');" >> json_parse.js
          echo "  console.log('newer=false');" >> json_parse.js
          echo "}" >> json_parse.js

          # Run json_parse.js and set environment variable
          node json_parse.js | tee output.log
          echo "$(grep 'newer=' output.log)" >> $GITHUB_ENV

      - name: Filter input files (U1/U2 only)
        if: env.newer == 'true'
        run: |
          mkdir -p tmp_input
          unzip input.zip -d tmp_input/
          cd tmp_input
          # Delete non-U1/U2 files
          find . -type f ! -name 'U1*' ! -name 'U2*' -delete
          # Remove empty directories
          find . -type d -empty -delete
          # Check if any files remain
          if [ -z "$(find . -type f)" ]; then
            echo "Error: No files starting with U1/U2 found in input"
            exit 1
          fi
          zip -r ../filtered_input.zip *
          cd ..
          rm -rf tmp_input input.zip
          
      - name: Prepare NaPTAN data directory
        run: mkdir -p /tmp/transx2gtfs

      - name: Download and package NaPTAN dataset
        run: |
          # Download the CSV file
          curl -L -o /tmp/Stops.csv "https://beta-naptan.dft.gov.uk/Download/National/csv"
          
      - name: Convert to GTFS
        run: transxchange2gtfs filtered_input.zip gtfs-output.zip

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add gtfs-output.zip
          git commit -m "Update GTFS file (filtered U1/U2 sources)"
          git push
